[project]
name = "star-rail-tools"
dynamic = ["version"]
description = "Honkai: Star Rail Toolkit"
authors = [{ name = "Charlie Brown", email = "cntvc@outlook.com" }]
maintainers = [{ name = "Charlie Brown", email = "cntvc@outlook.com" }]
readme = "README.md"
license = { text = "GPL-3.0-only" }
requires-python = ">=3.11,<3.13" # # pyinstaller requires ">=3.11,<3.13"
dependencies = [
    "loguru>=0.7.2",
    "pydantic>=2.7.0",
    "aiohttp>=3.9.5",
    "aiosqlite>=0.20.0",
    "pyperclip>=1.8.2",
    "xlsxwriter>=3.2.0",
    "textual>=0.57.1",
    "pycryptodome>=3.20.0",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


# PDM ====================================================================================

[tool.pdm]
distribution = true

[tool.pdm.build]
includes = ["star_rail"]
excludes = ["tests"]

[tool.pdm.version]
source = "call"
getter = "star_rail:get_version()"

[tool.pdm.dev-dependencies]
lint = ["ruff>=0.4.1", "pre-commit>=3.7.0"]
test = ["pytest>=8.1.1", "pytest-cov>=5.0.0", "pytest-asyncio>=0.23.6"]
dev = ["textual-dev>=1.5.1"]
release = ["pyinstaller>=6.5.0"]

[tool.pdm.scripts]
lint = "pre-commit run --all-files"
test = "pytest"
cov = { shell = """\
                python -m pytest \
                    --verbosity=3 \
                    --cov=star_rail \
                    tests/
                """ }
release_d = "pyinstaller --clean ./main_d.spec --noconfirm"
release_f = "pyinstaller --clean ./main_f.spec --noconfirm"


# Ruff ================================================================================

[tool.ruff]
line-length = 100
fix = true
src = ["star_rail", "tests"]

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint]
extend-select = [
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "W",   # pycodestyle
    "C90", # mccabe
]
extend-ignore = [
    "B024", # Abstract base class has no abstract methods
    "B028", # No explicit `stacklevel` keyword argument found
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # unused import.
    "F403", # cannot detect unused vars if we use starred import
    "F405", # may be undefined, or defined from star imports
    "E402", # module level import not at top of file
]

[tool.ruff.lint.isort]
known-first-party = ["star_rail"]

[tool.ruff.lint.mccabe]
max-complexity = 10


# pytest ====================================================================================

[tool.pytest.ini_options]
addopts = "-r aR"
testpaths = ["tests/"]
asyncio_mode = "auto"


# coverage ================================================================================

[tool.coverage.run]
branch = true
source = ["star_rail/"]
omit = ["**/__init__.py", "**/mapper.py", "*/tui/*", "exceptions.py", "main.py"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
ignore_errors = true
show_missing = true
# Donâ€™t report files that are 100% covered
skip_covered = true
